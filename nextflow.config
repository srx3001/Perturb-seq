includeConfig './configs/enviromental.config'

docker {
  enabled = true
}





process {

  //withName:some_process {
  //   cpus = { check_max( 4, 'cpus' ) }
  //   memory = { check_max( 8.GB, 'memory' ) }
  //   time = { check_max( 2.h * task.attempt, 'time' ) }
  //   container = 'image_name_1:image_version'
  //}
  
  withName :run_cellranger_multi {
     cpus = { check_max( 8, 'cpus' ) }
     memory = { check_max( 15.GB, 'memory' ) }
     time = { check_max( 8.h * task.attempt, 'time' ) }
     container = 'cell_ranger:latest'
  }
  withName :run_seurat {
     cpus = { check_max( 8, 'cpus' ) }
     memory = { check_max( 15.GB, 'memory' ) }
     time = { check_max( 16.h * task.attempt, 'time' ) }
     container = 'seurat:latest'
  }

}


// Function to ensure that resource requirements don't go beyond a maximum limit
// The check_max() function applies the thresholds set in --max_cpus, --max_memory and --max_time.
// NOTE! If you want to use check_max() in a custom config file, you must copy the function to the end of your config outside of any configuration scopes! It will not be inherited from base.config.
// Set Maximum for each parameter according to your PC/server/instance

params{
  max_memory                 = '32.GB'
  max_cpus                   = 16
  max_time                   = '4.h' 
}


def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

